
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.xtext.xtend'
apply plugin: 'application'





buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
dependencies {
    classpath "org.xtext:xtext-gradle-plugin:3.0.0"
  }
}


xtend {
  generator{
    javaSourceLevel = 1.8
  }
}




eclipse { 
  classpath {
    defaultOutputDir = file('bin')
  }
}

repositories {
  mavenLocal()
  mavenCentral()

  maven {
    url "https://ubc-stat-ml.github.io/artifacts/"
  }
  maven {
    url "https://www.stat.ubc.ca/~bouchard/maven/"
  }
    maven {
    url "https://www.sfu.ca/~lwa68/maven/"
  }  
  maven { url 'https://jitpack.io' }
}

dependencies { 
  implementation 'com.google.guava:guava:30.1.1-jre'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
  implementation 'ca.ubc.stat:binc:1.2.1'
  implementation 'ca.ubc.stat:briefj:2.4.20'
  implementation 'org.apache.commons:commons-lang3:3.4'
  implementation 'com.google.code.gson:gson:2.7'
  implementation 'org.eclipse.xtend:org.eclipse.xtend.lib:2.9.2'  
  implementation 'ca.sfu.stat:sfu-legacy:1.0.14' 
  implementation 'ca.ubc.stat:conifer:1.3.6'
  implementation 'ca.ubc.stat:bayonet:4.0.3' 
  implementation 'ca.ubc.stat:inits:2.6.3'
  implementation 'com.github.User:Repo:Tag'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}




if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        //noinspection SpellCheckingInspection
        tasks.withType(Javadoc) {
            // disable the crazy super-strict doclint tool in Java 8
            //noinspection SpellCheckingInspection
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


// http://www.gradle.org/docs/current/userguide/application_plugin.html
// use 'gradle startScripts' to create script
// use 'gradle distZip' to create deployable zip
// use 'gradle installApp' to copy it somewhere
  

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}

// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name. 
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which 
// could lead to confusion
startScripts.enabled = false
run.enabled = false

